
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  kafka:
    image: bitnami/kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 30s
      retries: 5
    restart: always

  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=StockCluster
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "DESCRIBE keyspaces"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stock_data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  data_ingestion:
    build: .
    command: python data_ingestion.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - stock-network
    restart: always

  real_time_processing:
    build: .
    command: python real_time_processing.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - stock-network
    restart: always

  data_storage:
    build: .
    command: python data_storage.py
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - stock-network
    restart: always

  data_analysis:
    build: .
    command: python data_analysis.py
    depends_on:
      cassandra:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    volumes:
      - .:/app
    networks:
      - stock-network
    restart: always

  kafka_consumer:
    build: .
    command: python kafka_consumer.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - stock-network
    restart: always

  data_visualization:
    build: .
    command: python data_visualization.py
    ports:
      - "5000:5000"
    networks:
      - stock-network
    depends_on:
      - cassandra
    restart: always

volumes:
  cassandra_data:
  postgres_data:

networks:
  stock-network:
    driver: bridge